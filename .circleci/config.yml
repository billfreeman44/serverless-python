---
version: 2.1

executors:
  node:
    parameters:
      tag:
        type: string
        default: latest
    working_directory: ~/build
    docker:
      - image: node:<< parameters.tag >>
  python:
    parameters:
      tag:
        type: string
        default: '3'
    working_directory: ~/build
    docker:
      - image: python:<< parameters.tag >>
  lambda:
    parameters:
      runtime:
        type: string
        default: python
      tag:
        type: string
        default: '3.7'
    working_directory: /var/task
    docker:
      - image: lambci/lambda:build-<<parameters.runtime>><< parameters.tag >>

commands:
  setup:
    description: Setup environment
    parameters:
      is_alpine:
        type: boolean
        default: false
      is_lambda:
        type: boolean
        default: false
    steps:
      - when:
          condition: << parameters.is_alpine >>
          steps:
            - run:
                name: Install Alpine Linux build dependencies
                command: apk add --no-cache ca-certificates git make openssh-client
      - unless:
          condition: << parameters.is_lambda >>
          steps:
            - run:
                name: Install Pipenv
                command: pip install pipenv
      - checkout
      - when:
          condition: << parameters.is_alpine >>
          steps:
            - run:
                name: Save Alpine Linux version
                command: |
                  echo "alpine: $(cat /etc/alpine-release)" >> .versions
      - run:
          name: Save Python and Pipenv versions
          command: |
            echo "python: ${PYTHON_VERSION}" >> .versions
            echo "pipenv: $(pipenv --version)" >> .versions
            cat .versions
  install:
    description: Install dependencies
    parameters:
      save_cache:
        type: boolean
        default: true
    steps:
      - restore_cache:
          key: pipenv-cache-{{ arch }}-{{ checksum ".versions" }}-
      - run:
          name: Install dependencies
          command: pipenv install --deploy --dev
      - when:
          condition: << parameters.save_cache >>
          steps:
            - save_cache:
                key: pipenv-cache-{{ arch }}-{{ checksum ".versions" }}-{{ epoch }}
                paths: ~/.cache/pipenv
jobs:
  test:
    description: Test Python package
    parameters:
      executor:
        type: string
        default: python
      tag:
        type: string
        default: latest
      is_alpine:
        type: boolean
        default: false
      is_lambda:
        type: boolean
        default: false
      upload_coverage:
        type: boolean
        default: false
    executor:
      name: << parameters.executor >>
      tag: << parameters.tag >>
    steps:
      - setup:
          is_alpine: << parameters.is_alpine >>
          is_lambda: << parameters.is_lambda >>
      - install
      - run:
          name: Test package
          command: make test
      - run:
          name: Build package
          command: make build
      - when:
          condition: << parameters.upload_coverage >>
          steps:
            - run:
                name: Upload coverage to Codecov
                command: |
                  if [[ -n "${CODECOV_TOKEN}" ]]; then
                    pipenv install --dev codecov
                    pipenv run codecov
                  fi
  publish:
    description: Publish Python package
    executor:
      name: python
      tag: '3'
    steps:
      - setup
      - install
      - run:
          name: Build package
          command: make build
      - deploy:
          name: Publish package
          command: make publish
  deploy:
    parameters:
      tag:
        type: string
    description: Deploy to AWS with Serverless
    executor:
      name: lambda
      tag: << parameters.tag >>
    environment:
      DOCKERIZE_PIP: 'false'
    steps:
      - setup:
          is_lambda: true
      - run:
          name: Install Node.js
          command: |
            curl https://lambci.s3.amazonaws.com/fs/nodejs8.10.tgz | tar -zx -C /
      - run:
          name: Update npm
          command: npm install -g npm@latest
      - run:
          name: Install dependencies
          command: npm ci
      - restore_cache:
          key: requirements-cache-{{ arch }}-{{ checksum ".versions" }}-
      - deploy:
          name: Deploy
          command: |
            export SERVERLESS_STAGE="${CIRCLE_TAG##*.}"
            npm run deploy
      - save_cache:
          key: requirements-cache-{{ arch }}-{{ checksum ".versions" }}-{{ epoch }}
          paths: .serverless-python-requirements

references:
  version_tags: &version_tags
    tags:
      only: /^v.*/
  filters: &filters
    filters:
      <<: *version_tags
  deploy_filters: &deploy_filters
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /stage.*/
  deploy_tag: &deploy_tag '3.7'

workflows:
  default:
    jobs:
      - test:
          name: test-latest
          upload_coverage: true
          <<: *filters
      - test:
          name: test-alpine
          tag: '3-alpine'
          is_alpine: true
          <<: *filters
      - test:
          name: test-lambda
          is_lambda: true
          executor: lambda
          tag: *deploy_tag
          <<: *filters
      - publish:
          filters:
            branches:
              ignore: /.*/
            <<: *version_tags
          requires:
            - test-latest
            - test-alpine
  serverless:
    jobs:
      - test:
          executor: lambda
          tag: *deploy_tag
          <<: *deploy_filters
      - deploy:
          <<: *deploy_filters
          tag: *deploy_tag
          requires:
            - test
